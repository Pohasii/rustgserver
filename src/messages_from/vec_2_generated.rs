// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum Vec2Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Vec2<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Vec2<'a> {
  type Inner = Vec2<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Vec2<'a> {
  pub const VT_X: flatbuffers::VOffsetT = 4;
  pub const VT_Y: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Vec2 { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args Vec2Args
  ) -> flatbuffers::WIPOffset<Vec2<'bldr>> {
    let mut builder = Vec2Builder::new(_fbb);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.finish()
  }


  #[inline]
  pub fn x(&self) -> f32 {
    self._tab.get::<f32>(Vec2::VT_X, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn y(&self) -> f32 {
    self._tab.get::<f32>(Vec2::VT_Y, Some(0.0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Vec2<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("x", Self::VT_X, false)?
     .visit_field::<f32>("y", Self::VT_Y, false)?
     .finish();
    Ok(())
  }
}
pub struct Vec2Args {
    pub x: f32,
    pub y: f32,
}
impl<'a> Default for Vec2Args {
  #[inline]
  fn default() -> Self {
    Vec2Args {
      x: 0.0,
      y: 0.0,
    }
  }
}
pub struct Vec2Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> Vec2Builder<'a, 'b> {
  #[inline]
  pub fn add_x(&mut self, x: f32) {
    self.fbb_.push_slot::<f32>(Vec2::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f32) {
    self.fbb_.push_slot::<f32>(Vec2::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> Vec2Builder<'a, 'b> {
    let start = _fbb.start_table();
    Vec2Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Vec2<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Vec2<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Vec2");
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_vec_2<'a>(buf: &'a [u8]) -> Vec2<'a> {
  unsafe { flatbuffers::root_unchecked::<Vec2<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_vec_2<'a>(buf: &'a [u8]) -> Vec2<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Vec2<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Vec2`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_vec_2_unchecked`.
pub fn root_as_vec_2(buf: &[u8]) -> Result<Vec2, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Vec2>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Vec2` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_vec_2_unchecked`.
pub fn size_prefixed_root_as_vec_2(buf: &[u8]) -> Result<Vec2, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Vec2>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Vec2` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_vec_2_unchecked`.
pub fn root_as_vec_2_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Vec2<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Vec2<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Vec2` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_vec_2_unchecked`.
pub fn size_prefixed_root_as_vec_2_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Vec2<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Vec2<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Vec2 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Vec2`.
pub unsafe fn root_as_vec_2_unchecked(buf: &[u8]) -> Vec2 {
  flatbuffers::root_unchecked::<Vec2>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Vec2 and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Vec2`.
pub unsafe fn size_prefixed_root_as_vec_2_unchecked(buf: &[u8]) -> Vec2 {
  flatbuffers::size_prefixed_root_unchecked::<Vec2>(buf)
}
#[inline]
pub fn finish_vec_2_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Vec2<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_vec_2_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Vec2<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
