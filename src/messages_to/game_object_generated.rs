// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
// struct Game_Object, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Game_Object(pub [u8; 12]);
impl Default for Game_Object { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl std::fmt::Debug for Game_Object {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    f.debug_struct("Game_Object")
      .field("id", &self.id())
      .field("obj_type", &self.obj_type())
      .field("x", &self.x())
      .field("y", &self.y())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Game_Object {}
impl flatbuffers::SafeSliceAccess for Game_Object {}
impl<'a> flatbuffers::Follow<'a> for Game_Object {
  type Inner = &'a Game_Object;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Game_Object>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Game_Object {
  type Inner = &'a Game_Object;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Game_Object>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Game_Object {
    type Output = Game_Object;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Game_Object as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Game_Object {
    type Output = Game_Object;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Game_Object as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Game_Object {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}
impl<'a> Game_Object {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    id: u8,
    obj_type: u8,
    x: f32,
    y: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_id(id);
    s.set_obj_type(obj_type);
    s.set_x(x);
    s.set_y(y);
    s
  }

  pub fn id(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<u8>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<u8>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_id(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const u8 as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<u8>(),
      );
    }
  }

  pub fn obj_type(&self) -> u8 {
    let mut mem = core::mem::MaybeUninit::<u8>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[1..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<u8>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_obj_type(&mut self, x: u8) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const u8 as *const u8,
        self.0[1..].as_mut_ptr(),
        core::mem::size_of::<u8>(),
      );
    }
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<f32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<f32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const f32 as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<f32>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<f32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<f32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const f32 as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<f32>(),
      );
    }
  }

}

